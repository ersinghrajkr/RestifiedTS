import { expect } from 'chai';
import { RestifiedLogger } from '../../src/logging/RestifiedLogger';
const why = require('why-is-node-running');

describe('Process Hanging Diagnostics @unit', () => {
  let logger: RestifiedLogger;

  beforeEach(() => {
    logger = new RestifiedLogger({
      enableConsole: false,
      enableFile: false,
      enableJSON: false
    });
  });

  afterEach(() => {
    try {
      logger.destroy();
    } catch (error) {
      // Ignore cleanup errors
    }
  });
  after(() => {
    setTimeout(() => {
      why();
      process.exit(0); // Force exit after diagnostics
    }, 200);
  });

  it('should identify what keeps process alive', async function () {
    this.timeout(5000);

    // Log some messages to activate the logger
    logger.info('Test message 1');
    logger.info('Test message 2');

    // Wait a bit for any async operations
    await new Promise(resolve => setTimeout(resolve, 100));

    // Clean up the logger
    logger.destroy();

    // Wait a bit more
    await new Promise(resolve => setTimeout(resolve, 100));

    // Show what's keeping the process alive
    console.log('\n🔍 Analyzing what keeps the process alive:');
    why();

    expect(true).to.be.true; // Test always passes, we just want the diagnostic output
  });

  it('should check active handles after cleanup', async function () {
    this.timeout(5000);

    // Create and use a logger
    const testLogger = new RestifiedLogger({
      enableConsole: false,
      enableFile: false,
      enableJSON: false
    });

    testLogger.info('Test message before cleanup');

    // Cleanup
    testLogger.destroy();

    // Wait for cleanup to complete
    await new Promise(resolve => setTimeout(resolve, 200));

    // Check active handles
    const activeHandles = (process as any)._getActiveHandles();
    const activeRequests = (process as any)._getActiveRequests();

    console.log('\n📊 Active handles after cleanup:', activeHandles.length);
    console.log('📊 Active requests after cleanup:', activeRequests.length);

    if (activeHandles.length > 0) {
      console.log('🔍 Active handles:');
      activeHandles.forEach((handle: any, index: number) => {
        console.log(`  ${index + 1}. ${handle.constructor.name}`);
      });
    }

    if (activeRequests.length > 0) {
      console.log('🔍 Active requests:');
      activeRequests.forEach((request: any, index: number) => {
        console.log(`  ${index + 1}. ${request.constructor.name}`);
      });
    }

    expect(true).to.be.true;
  });
});